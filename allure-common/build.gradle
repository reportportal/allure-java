/*
 * Copyright 2021 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply from: "${project.scripts_url}/${project.scripts_branch}/build-quality.gradle"
apply from: "${project.scripts_url}/${project.scripts_branch}/release-commons.gradle"
apply from: "${project.scripts_url}/${project.scripts_branch}/signing.gradle"

release {
    tagTemplate = '$name-$version'
    git {
        requireBranch = 'main'
    }
}

project.ext.limits = [
        'instruction': 70,
        'branch'     : 53,
        'line'       : 75,
        'complexity' : 60,
        'method'     : 65,
        'class'      : 50
]

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

dependencies {
    compileOnly 'com.epam.reportportal:client-java:5.2.7'

    implementation ("io.qameta.allure:allure-java-commons:${allure_version}") {
        exclude group: 'org.slf4j'
    }
    implementation 'org.slf4j:slf4j-api:2.0.7'

    testImplementation 'com.epam.reportportal:agent-java-test-utils:0.0.2'
    testImplementation("org.junit.platform:junit-platform-runner:${junit5_runner_version}") {
        exclude module: 'junit'
    }
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit5_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junit5_version}"

    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockito_version}"
}

test {
    useJUnitPlatform()
    outputs.upToDateWhen { false }
    maxParallelForks(5) // it's forks - separate JVMs, should not interfere each other
    doFirst {
        def weaver = configurations.testRuntimeClasspath.find { it.name.contains("aspectjweaver") }
        jvmArgs += "-javaagent:$weaver"
    }
    environment "AGENT_NO_ANALYTICS", "1"
}
